import typing

import typer

from jobbergate_cli.constants import SortOrder
from jobbergate_cli.exceptions import Abort, handle_abort
from jobbergate_cli.schemas import JobbergateContext, ListResponseEnvelope
from jobbergate_cli.render import StyleMapper, render_list_results, render_single_result
from jobbergate_cli.requests import make_request


# move hidden field logic to the API
HIDDEN_FIELDS = [
    "application_config",
    "application_file",
    "created_at",
    "updated_at",
]

ID_NOTE = """

    This id represents the primary key of the application in the database. It
    will always be a unique integer and is automatically generated by the server
    when an Application is created. All applications receive an id, so it may
    be used to target a specific instance of an application whether or not it
    is provided with a human-friendly "identifier".
"""


IDENTIFIER_NOTE = """

    The identifier allows the user to access commonly used applications with a
    friendly name that is easy to remember. Identifiers should only be used
    for applications that are frequently used or should be easy to find in the list.
    An identifier may be added, removed, or changed on an existing application.
"""


style_mapper = StyleMapper(
    id = "green",
    application_name = "cyan",
    application_identifier = "magenta",
)


app = typer.Typer(
    help="Commands to interact with applications",
)


@app.command()
@handle_abort
def list_all(
    ctx: typer.Context,
    show_all: bool = typer.Option(False, "--all", help="Show all applications, even the ones without identifier"),
    user_only: bool = typer.Option(False, "--user", help="Show only applications owned by the current user"),
    search: typing.Optional[str] = typer.Option(None, help="Apply a search term to results"),
    sort_order: SortOrder = typer.Option(SortOrder.UNSORTED, help="Specify sort order"),
    sort_field: typing.Optional[str] = typer.Option(None, help="The field by which results should be sorted"),
):
    """
    Show available applications
    """
    jg_ctx: JobbergateContext = ctx.obj
    params: typing.Dict[str, typing.Any] = dict(
        all=show_all,
        user=user_only,
    )
    if search is not None:
        params["search"] = search
    if sort_order is not SortOrder.UNSORTED:
        params["sort_ascending"] = SortOrder is SortOrder.ASCENDING
    if sort_field is not None:
        params["sort_field"] = sort_field

    # Make static type checkers happy
    assert jg_ctx.client is not None

    envelope = typing.cast(ListResponseEnvelope, make_request(
        jg_ctx.client,
        "/applications",
        "GET",
        expected_status=200,
        abort_message="Couldn't retrieve applications list from API",
        support=True,
        response_model=ListResponseEnvelope,
        data=params,
    ))
    render_list_results(
        jg_ctx,
        envelope,
        title="Applications List",
        style_mapper=style_mapper,
        hidden_fields=HIDDEN_FIELDS,
    )


@app.command()
@handle_abort
def get_one(
    ctx: typer.Context,
    id: typing.Optional[int] = typer.Option(
        None,
        help=f"The specific id of the application. {ID_NOTE}",
    ),
    identifier: typing.Optional[str] = typer.Option(
        None,
        help=f"The human-friendly identifier of the application. {IDENTIFIER_NOTE}",
    ),
):
    """
    Get a single application by id or identifier
    """
    jg_ctx: JobbergateContext = ctx.obj
    url = f"/applications/{id}"
    params = dict()
    if id is None and identifier is None:
        raise Abort(
            """
            You must supply either [yellow]id[/yellow] or [yellow]identifier[/yellow].
            """,
            subject="INVALID PARAMS",
            warn_only=True,
        )
    elif id is not None and identifier is not None:
        raise Abort(
            """
            You may not supply both [yellow]id[/yellow] and [yellow]identifier[/yellow].
            """,
            subject="INVALID PARAMS",
            warn_only=True,
        )
    elif identifier is not None:
        url = f"/applications"
        params["identifier"] = identifier

    # Make static type checkers happy
    assert jg_ctx.client is not None

    stub = f"{id=}" if id is not None else f"{identifier=}"
    result = typing.cast(typing.Dict[str, typing.Any], make_request(
        jg_ctx.client,
        url,
        "GET",
        expected_status=200,
        abort_message=f"Couldn't retrieve application {stub} from API",
        support=True,
        params=params,
    ))
    render_single_result(
        jg_ctx,
        result,
        hidden_fields=HIDDEN_FIELDS,
        title="Application",
    )
