import typing

from jobbergate_cli.constants import SortOrder
from jobbergate_cli.exceptions import Abort
from jobbergate_cli.schemas import JobbergateContext, ListResponseEnvelope
from jobbergate_cli.crud_helpers import StyleMapper, render_list_results, render_single_result


# move hidden field logic to the API
HIDDEN_FIELDS = [
    "application_config",
    "application_file",
    "created_at",
    "updated_at",
]

ID_NOTE = """

    This id represents the primary key of the application in the database. It
    will always be a unique integer and is automatically generated by the server
    when an Application is created. All applications receive an id, so it may
    be used to target a specific instance of an application whether or not it
    is provided with a human-friendly "identifier".
"""


IDENTIFIER_NOTE = """

    The identifier allows the user to access commonly used applications with a
    friendly name that is easy to remember. Identifiers should only be used
    for applications that are frequently used or should be easy to find in the list.
    An identifier may be added, removed, or changed on an existing application.
"""


style_mapper = StyleMapper(
    id = "green",
    application_name = "cyan",
    application_identifier = "magenta",
)


def list_applications(
    ctx: JobbergateContext,
    show_all: bool,
    user_only: bool,
    search: typing.Optional[str],
    sort_order: SortOrder,
    sort_field: typing.Optional[str],
):
    persona = ctx.persona
    client = ctx.client
    # Should not happen, but this will make mypy happy
    assert persona is not None

    params: typing.Dict[str, typing.Any] = dict(
        all=show_all,
        user=user_only,
    )
    if search is not None:
        params["search"] = search
    if sort_order is not SortOrder.UNSORTED:
        params["sort_ascending"] = SortOrder is SortOrder.ASCENDING
    if sort_field is not None:
        params["sort_field"] = sort_field

    # Make mypy happy
    assert client is not None
    raw_response = client.get(f"/applications", params=params).json()
    envelope = ListResponseEnvelope(**raw_response)
    render_list_results(
        ctx,
        envelope,
        title="Applications List",
        style_mapper=style_mapper,
        hidden_fields=HIDDEN_FIELDS,
    )


def get_application(
    ctx: JobbergateContext,
    id: typing.Optional[int] = None,
    identifier: typing.Optional[str] = None,
):

    persona = ctx.persona
    client = ctx.client
    # Should not happen, but this will make mypy happy
    assert persona is not None

    url = f"/applications/{id}"
    params = dict()
    if id is None and identifier is None:
        raise Abort(
            """
            You must supply either [yellow]id[/yellow] or [yellow]identifier[/yellow].
            """,
            subject="INVALID PARAMS",
            warn_only=True,
        )
    elif id is not None and identifier is not None:
        raise Abort(
            """
            You may not supply both [yellow]id[/yellow] and [yellow]identifier[/yellow].
            """,
            subject="INVALID PARAMS",
            warn_only=True,
        )
    elif identifier is not None:
        url = f"/applications"
        params["identifier"] = identifier

    assert client is not None
    result = client.get(url, params=params).json()
    render_single_result(
        ctx,
        result,
        hidden_fields=HIDDEN_FIELDS,
        title="Application",
    )
